Cara membuat laravel :
1. Install composer, laragon, node js
2. cara donwload laravel:
    composer create-project laravel/laravel nama_project
   dengan versi 9.0
    composer create-project laravel/laravel:^10.0 example-app
3. cara menjalankan laravel:
    php artisan serve
4. cara membuat controller, model, migration :
    php artisan make:model Product -mcr

   membuat controller api product :
    php artisan make:controller Api/ProductApiController

5. setting env database
6. membuat factory :
    php artisan make:factory ProductFactory --model=Product
    ------------
    'name' => $this->faker->text(10),
    'description' => $this->faker->text,
    'price' => $this->faker->numberBetween(1000, 100000),
    'image' => $this->faker->imageUrl(),
7. membuat seeder :
    php artisan make:seeder ProductSeeder
    ------------
    Product::factory(10)->create();
8. menjalankan seeder :
    php artisan db:seed --class=ProductSeeder
    php artisan migrate:fresh --seed

9. membuat api auth :
    php artisan make:controller API/AuthController

10. membuat middleware custom :
    php artisan make:middleware CustomHeader
11. setting CustomHeader.php :
    authController.php
    public const header = [
        'X-PARTNER-ID' => '123',
        'X-EXTERNAL-ID' => '123',
        'X-SIGNATURE' => '123',
        'X-TIMESTAMP' => '123',
    ];

    CustomHeader.php
    public function handle(Request $request, Closure $next): Response
    {
        $ah = AuthController::header;
        $res1 = $request->header('X-PARTNER-ID');
        $res2 = $request->header('X-EXTERNAL-ID');
        $res3 = $request->header('X-SIGNATURE');
        $res4 = $request->header('X-TIMESTAMP');

        if (
            $res1 === $ah['X-PARTNER-ID'] &&
            $res2 === $ah['X-EXTERNAL-ID'] &&
            $res3 === $ah['X-SIGNATURE'] &&
            $res4 === $ah['X-TIMESTAMP']
        ) {
            return $next($request);
        } else {
            return response()->json(
                [
                    'status' => 503,
                    'error' => "Silahkan isi header dengan benar"
                ]
            );
        }
    }

12. setting middleware di kernel.php :
    protected $middlewareAliases = [
        // custom header
        "snap-bi" => CustomHeader::class,
    ];
13. setting route :
    Route::middleware(['auth:sanctum', 'snap-bi'])->group(function () {
        Route::get('product', [ProductApiController::class, 'index']);
    });
    atau
    Route::get('product', [ProductApiController::class, 'index'])->middleware('snap-bi');

14. membuat open api dengan swagger :
    composer require darkaonline/l5-swagger
    php artisan vendor:publish --provider "L5Swagger\L5SwaggerServiceProvider"
    php artisan l5-swagger:generate
15. setting AppServiceProvider.php di register:
    $this->app->register(\L5Swagger\L5SwaggerServiceProvider::class);
16. setting Contorller.php :
    /**
    * @OA\Info(
    *    title="Dokumentasi REST API Products",
    *    version="1.0.0",
    * )
    */
17. jalankan swagger :
    php artisan l5-swagger:generate
    http://localhost:8000/api/documentation


================SNAP BI================
1. cara membuat private key :
    openssl genrsa -out private.pem 2048
    --> Generate Private Key
    openssl genrsa -out PRIVATEKEYNAME.key 2048
2. cara membuat public key :
    openssl rsa -in private.pem -pubout -out public.pem
    -- Generate Public Key
    openssl rsa -in PRIVATEKEYNAME.key -pubout -out PUBLICKEYNAME.pub
3. SIGNATURE :
    --> Generate CSR
    opensslreq -new -key PRIVATEKEYNAME.key -out CSRNAME.csr-subj "/C=ID/ST=DKI Jakarta/L=Jakarta Pusat/O=NAMAPESERTA/OU=Information Security Division/CN=BIC"
4. Signature Service :
    // app/Services/SignatureService.php

    namespace App\Services;

    class SignatureService
    {
        protected $clientKey = "client key";
        protected $privateKeyString = <<<EOD
        -----BEGIN PRIVATE KEY-----
        XXXXX
        -----END PRIVATE KEY-----
        EOD;

        public function generateSignature()
        {
            $timestamp = now()->format('Y-m-d\TH:i:sP');
            $stringToSign = $this->clientKey . "|" . $timestamp;

            $privateKey = openssl_pkey_get_private($this->privateKeyString);
            if (!$privateKey) {
                return ['error' => 'Private key not valid'];
            }

            $signature = '';
            if (!openssl_sign($stringToSign, $signature, $privateKey, OPENSSL_ALGO_SHA256)) {
                return ['error' => 'Failed to sign data'];
            }

            return [
                'signature_hex' => bin2hex($signature),
                'timestamp' => $timestamp,
            ];
        }
    }

5. setting controller :
php artisan make:controller SignatureController
// app/Http/Controllers/SignatureController.php

namespace App\Http\Controllers;

use App\Services\SignatureService;

class SignatureController extends Controller
{
    protected $signatureService;

    public function __construct(SignatureService $signatureService)
    {
        $this->signatureService = $signatureService;
    }

    public function generateSignature()
    {
        return $this->signatureService->generateSignature();
    }
}
6. setting route :
/ routes/web.php

use App\Http\Controllers\SignatureController;

Route::get('/generate-signature', [SignatureController::class, 'generateSignature']);

7. mendapatkan token :
php artisan make:controller TokenApiController
// app/Http/Controllers/ApiController.php

namespace App\Http\Controllers;

use Illuminate\Support\Facades\Http;

class ApiController extends Controller
{
    public function sendRequest()
    {
        $response = Http::withHeaders([
            'X-CLIENT-KEY' => 'clientkey',
            'X-TIMESTAMP' => '2024-08-13T12:19:20+07:00',
            'X-SIGNATURE' => 'signature',
            'Content-Type' => 'application/json',
        ])->post('url', [
            'grant_type' => 'client_credentials',
            'additionalInfo' => new \stdClass(),
        ]);

        return $response->body();
    }
}
8. setting route :
// routes/web.php

use App\Http\Controllers\ApiController;

Route::get('/send-request', [ApiController::class, 'sendRequest']);

9. signature Transaksi :
// app/Services/SignatureService.php

namespace App\Services;

use Illuminate\Support\Str;

class SignatureService
{
    protected $symmetricKey = "symetrickey";
    protected $accessToken = "TOKEN";
    protected $requestURL = "url";
    protected $httpMethod = "POST";

    public function generateSignature($requestBody)
    {
        $minifiedBody = preg_replace('/\s+/', '', $requestBody);
        $sha256Hash = hash('sha256', $minifiedBody);
        $lowercaseHash = strtolower($sha256Hash);

        $timestamp = now()->format('Y-m-d\TH:i:sP');
        $resultString = $this->httpMethod . ':' . $this->requestURL . ':' . $this->accessToken . ':' . $lowercaseHash . ':' . $timestamp;

        $signature = $this->createSignatureTxn($this->symmetricKey, $resultString);

        return [
            'payload' => $resultString,
            'signature' => $signature,
            'timestamp' => $timestamp,
        ];
    }

    protected function createSignatureTxn($symmetricKey, $resultString)
    {
        $secretKeyHash = hash('sha512', $symmetricKey, true);
        $secretKeyEnc = base64_encode($secretKeyHash);
        return hash_hmac('sha512', $resultString, $secretKeyEnc);
    }
}

10. setting controller :
php artisan make:controller SignatureTransactionController
// app/Http/Controllers/SignatureController.php

namespace App\Http\Controllers;

use App\Services\SignatureService;
use Illuminate\Http\Request;

class SignatureController extends Controller
{
    protected $signatureService;

    public function __construct(SignatureService $signatureService)
    {
        $this->signatureService = $signatureService;
    }

    public function generateSignature(Request $request)
    {
        $requestBody = json_encode([
            'fromDateTime' => '2024-08-11T07:00:00+07:00',
            'toDateTime' => '2024-08-11T23:30:00+07:00',
            'pageNumber' => 1,
        ]);

        $result = $this->signatureService->generateSignature($requestBody);

        return response()->json($result);
    }
}
11. setting route :
// routes/web.php

use App\Http\Controllers\SignatureController;

Route::get('/generate-signature', [SignatureController::class, 'generateSignature']);


